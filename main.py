# -*- coding: utf-8 -*-
"""AOBD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1coOisp_Fb-dFRt0dsZcoBCySIEfypr__
"""

# Import required libraries and modules 
import matplotlib.pyplot as plt 
from sklearn.datasets.samples_generator import make_blobs 
from sklearn.cluster import Birch 
import numpy as np

# Function to greedily store values from the cluster in proper manner (Dividing into equivalent partitions)
def store_results(pred,taken,group_no,dataset,L):
  cnt = 0
  for i in range(0,len(pred)):
    if (pred[i] == L and taken[i]==False and cnt < 2):
      group_no.append(dataset[i])
      cnt += 1 
      taken[i] = True

# Function to greedily store values from the cluster in proper manner for the left values after divding
def fill_leftover(pred,taken,group_no,dataset):
  cnt = 0 
  for i in range(0,len(pred)):
    if (taken[i]==False and cnt < 2):
      group_no.append(dataset[i])
      cnt += 1 
      taken[i] = True


# Group size can be variable
GROUP_SIZE = 8
# No. of Group can also be variable
GROUPS = 3
# Skills can also be changed as they are the features
SKILLS = 3

# Generating 24 samples using make_blobs | 24 is the no. of students
dataset, clusters = make_blobs(n_samples = 24, centers = GROUPS, n_features = SKILLS, cluster_std = 0.75, center_box=(0,10), random_state = 0) 
  
# Creating the BIRCH clustering model 
model = Birch(branching_factor = 40, n_clusters = 3, threshold = 1.5) 
  
# Fit the data (Training) 
model.fit(dataset) 
  
# Predict the same data 
pred = model.predict(dataset) 
  
# print(dataset)
# Creating a scatter plot 

fig = plt.figure()
# Using Matplotlib for 3D plot
ax = fig.gca(projection='3d')
ax.scatter(dataset[:, 0], dataset[:, 1], dataset[:, 2], c=pred, cmap = 'rainbow', alpha = 0.7, edgecolors = 'b')

# Input Dataset
print('Dataset : ',dataset)
# print(pred)

# List for the final teams
group1 = []
group2 = []
group3 = []
taken = [False] * len(pred)

store_results(pred,taken,group1,dataset,2)
store_results(pred,taken,group1,dataset,1)
store_results(pred,taken,group1,dataset,0)

# print(taken)

store_results(pred,taken,group2,dataset,2)
store_results(pred,taken,group2,dataset,1)
store_results(pred,taken,group2,dataset,0)

store_results(pred,taken,group3,dataset,2)
store_results(pred,taken,group3,dataset,1)
store_results(pred,taken,group3,dataset,0)

# Proper filling (Balanced fillings)

fill_leftover(pred,taken,group1,dataset)
fill_leftover(pred,taken,group2,dataset)
fill_leftover(pred,taken,group3,dataset)

# Arranging the left over candidates without disturbing the balance

print('Team 1 has people with skills : ',group1)
print('Team 2 has people with skills : ',group2)
print('Team 3 has people with skills : ',group3)


# plt.scatter(dataset[:, 0], dataset[:, 1],  c = pred, cmap = 'rainbow', alpha = 0.7, edgecolors = 'b') 
# plt.show()
